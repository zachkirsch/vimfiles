#!/usr/bin/env python

# todo make sure no out of bounds

class Item_in_A:
    def __init__(self, index):
        self.index = index


class Constraint2:

    def __init__(self, this, comparison, other):
        assert(isinstanc)



class Constraint:

    # some element between A[0] and A[n-1] has the value "value", say at index m
    # every element between A[m] and A[n] is at least A[n]
    def __init__(self, value, n):
        self.value = value
        self.n = n



def count_possiblities(constraints, A):
    if not constraints:
        return reduce(lambda (min1,max1),(min2,max2): 0 if (max1<min1 or max2<min2) else ((max1-min1+1)*(max2-min2+1)), A, 1) % (10**9 + 7)
    for a in A:
        # if constraint could be applied to A:
        # count_possiblities(constraints[1:], A with constraint applied to a)
        pass

def solution(B, M):

    A = []
    for b in B:
        A.append((1,M)) # the range of a[i] is (1,M) at the beginning

    for index, b in enumerate(B):
        if b != 0:
            # constraint: a[i] > b
            (lower, upper) = A[index]
            A[index] = (max(lower, b+1), upper)

            # constraint: b appeared at least once between a[0] through a[i-1]. say at index n
            options = filter(lambda (_, (lower,upper)): lower <= b and upper >= b,
                             enumerate(A[:index-1]))
            if len(options) == 1:
                (i, _) = options[0]
                A[i] = b


            # constraint: a[n+1] through a[i-1] are all >= a[i]

        else:
            # constraint: a[i] was less than or equal to a[0] through a[i-1]
            # A[i] <= A[0] AND A[i] <= A[1] AND ... AND A[i] <= A[i-1]
            pass



solution([0,3,5,6],10)
