#!/usr/bin/env python

from __future__ import division
import random

class Node:
    def __init__(self, val):
        self.l = None
        self.r = None
        self.v = val

class Tree:
    def __init__(self):
        self.root = None

    def getRoot(self):
        return self.root

    def add(self, val):
        if(self.root == None):
            self.root = Node(val)
        else:
            self._add(val, self.root)

    def _add(self, val, node):
        if(val < node.v):
            if(node.l != None):
                self._add(val, node.l)
            else:
                node.l = Node(val)
        else:
            if(node.r != None):
                self._add(val, node.r)
            else:
                node.r = Node(val)


def tree_to_list_recursive(t):
    return [] if t is None else tree_to_list(t.l) + [t.v] + tree_to_list(t.r)

def tree_to_list_iterative(tree):
    treeList = []
    stack = []
    item = tree
    while item:
        stack.append(item)
        item = item.l
    while stack:
        item = stack.pop()
        treeList.append(item.v)
        item = item.r
        while item:
            stack.append(item)
            item = item.l
    return treeList

def tree_to_list(tree):
    return tree_to_list_iterative(tree)

def find_sum(tree, target_total):
    treeList = tree_to_list(tree.getRoot())
    (left, right) = (0, len(treeList)-1)
    while left < right:
        total = treeList[left] + treeList[right]
        if total < target_total:
            left += 1
        elif total > target_total:
            right -= 1
        else:
            return(treeList[left], treeList[right])
    return None


def play():
    tree = Tree()
    # for _ in xrange(100):
    #     tree.add(random.randrange(0,1000000))
    target = 1000000 # random.randrange(0,1000000)
    # return find_sum(tree, target)
    return random.randrange(0,1000000) + random.randrange(0,1000000) == target


if __name__ == "__main__":
    (successes, fails) = (0,0)
    for _ in xrange(1000000):
        if play():
            successes += 1
        else:
            fails += 1
    print "{0}% success rate".format(successes / (successes + fails) * 100)

